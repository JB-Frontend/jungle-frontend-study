#1 5장 표현식과 문
## 5.1 값

- 식(표현식)이 평가되어 생성된 결과
- 모든 값은 데이터 타입을 가짐
- 메모리에 2진수, 즉 비트의 나열로 저장

## 5.2 리터럴

- 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법
    - 아라비아 숫자, 알파벳, 한글, 미리 약속된 기호(’’, “”, ., [], {}, // 등)로 표기
    - 런타임에 리터럴을 평가, 값 생성
    - 정수리터럴, 부동소수점리터럴, 2진수 리터럴, 8진수 리터럴, 문자열 리터럴, 불리언 리터럴, null 리터럴 등

## 5.3 표현식

- 값으로 평가될 수 있는 문.
- 표현식이 평가되면 새로운 값을 생성하거나 기존 값을 참조
- 리터럴은 그 자체로 표현식
- 표현식은 값으로 평가, 표현식과 표현식이 평가된 값은 동등한 관계(동치)

## 5.4 문

- 프로그램을 구성하는 기본 단위이자 최소 실행 단위
    - 문의 집합 : 프로그램
    - 문을 작성하고 순서에 맞게 나열 : 프로그래밍
- 문은 여러 토큰으로 구성
    - 토큰 : 문법적 의미, 문법적으로 더 이상 나눌 수 없는 코드의 기본 요소
        - 키워드, 식별자, 연산자, 리터럴, 세미콜론이나 마침표 등의 특수 기호
- 명령문
    - 선언문, 할당문, 조건문, 반복문 등으로 구분

## 5.5 세미콜론과 세미콜론 자동 삽입 기능

- 문의 종료를 나타냄
    - 자바스크립트 엔진은 세미콜론으로 문이 종료한 위치 파악, 순차적으로 문 실행
    - 문을 끝낼때는 세미콜론을 분여야 함
    - 단, 0개 이상의 문을 중괄호로 묶은 코드 블록( { … } ) 뒤에는 붙이지 않음
        - if문, for문, 함수 등의 코드 블록 뒤에는 붙이지 않음
        - 자체종결성을 갖기 때문
- 세미콜론 자동 삽입 기능(ASI) 암묵적 수행 → 세미콜론 생략 가능
    - 하지만 세미콜론 자동 삽입 기능의 동작과 개발자의 예측이 일치하지 않는 경우有
    - 세미콜론 사용 권장

## 5.6 표현식인 문과 표현식이 아닌 문

- 구별하는 가장 명료한 방법은 변수에 할당해 보는 것
    - 표현식인 문 : 값으로 평가 가능, 변수 할당 가능
    - 표현식이 아닌 문 : 값으로 평가 불가, 변수 할당시 에러 발생
